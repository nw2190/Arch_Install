
if [ -d ~/.texmf ] ; then
    export TEXMFHOME=~/.texmf
fi

# added by Anaconda2 4.1.1 installer
#export PATH="/home/nick/anaconda2/bin:$PATH"
#export PATH="/home/nick/anaconda2/pkgs:/home/nick/anaconda2/bin:$PATH"

# added by Anaconda2 4.1.1 installer
#export PATH="/home/nick/anaconda2/bin:$PATH"

# Manually added to install Dolfin
#export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib/openmpi/:$LD_LIBRARY_PATH

# Add space before ls
#alias l='echo ;ls -l; echo '
#alias la='echo ;ls -a; echo '
#alias ls='echo ;ls ; echo '

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# FENICS INSTALL
# c.f. https://bitbucket.org/fenics-project/docker
#alias start-fenics='docker run -ti -v $(pwd):/home/fenics/shared quay.io/fenicsproject/stable:current'


# DOLFIN INSTALL
#source /usr/share/dolfin/dolfin.conf


#Before rushing off to try the demos, don't forget to update your
#environment variables. This can be done easily using the helper file
#'dolfin.conf' which sets the appropriate variables (for users of the
#Bash shell).

#To update your environment variables, run the following command:

#source /usr/share/dolfin/dolfin.conf

#For future reference, we recommend that you add this command to your
#configuration (.bashrc, .profile or similar).


## ADD POWERLINE TO SHELL
#export TERM="xterm-256color"
powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
#. /usr/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh
. /usr/lib/python3.7/site-packages/powerline/bindings/bash/powerline.sh
# TMUX/POWERLINE settings in:
# /usr/lib/python3.6/site-packages/powerline/config_files/themes/tmux/default.json

## AUTOSTART TMUX
# If not running interactively, do not do anything
#[[ $- != *i* ]] && return
#[[ -z "$TMUX" ]] && exec tmux 
#[[ -z "$TMUX" ]] && exec tmux attach -t root
# TMUX
#if which tmux >/dev/null 2>&1; then
    #if not inside a tmux session, and if no session is started, start a new session
#    test -z "$TMUX" && (tmux attach || tmux new-session)
#fi

# Added for yaourt
export VISUAL="emacs"

# Added for sudoedit
export SUDO_EDITOR="emacs"

# Shortcuts for ssh/rsync
# [OMITTED]

# Full tab completion for symlinks
bind 'set mark-symlinked-directories on'

# Set display to open GTK applications
#export DISPLAY=:0.0

# Specify Lynx style sheet
export LYNX_LSS="$HOME/.lynx.lss"
#export LYNX_LSS="$HOME/lynx.lss"
export WWW_HOME='http://duckduckgo.com/lite/'



# Avoid TensorFlow Warnings
export TF_CPP_MIN_LOG_LEVEL=2

## LOAD ALIAS FILE
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi


# Remove green highlighting from directories
LS_COLORS="$LS_COLORS:ow="
export LS_COLORS

eval $(thefuck --alias)


# Specify preferred block sizes for df, du, ls
export DF_BLOCK_SIZE="MB"
export DU_BLOCK_SIZE="MB"
export LS_BLOCK_SIZE="MB"

# Source get_lab_ip.sh to set $LAB environment variable
. /home/nick/Documents/Scripts/get_lab_ip.sh

# gPodder settings
export GPODDER_HOME="/home/nick/Documents/gPodder/"
export GPODDER_DOWNLOAD_DIR="/home/nick/Documents/gPodder/Downloads/"


# Include EIGEN library for C++
export CPLUS_INCLUDE_PATH=/usr/include/eigen3
#export CPATH=/opt/intel/compilers_and_libraries_2019.2.187/linux/compiler/lib


#
# TMUX .bash_history
# https://askubuntu.com/questions/339546/how-do-i-see-the-history-of-the-commands-i-have-run-in-tmux
# avoid duplicates..
export HISTCONTROL=ignoredups:erasedups
# append history entries..
shopt -s histappend
# After each command, save and reload history
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
